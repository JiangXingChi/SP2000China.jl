var documenterSearchIndex = {"docs":
[{"location":"#SP2000China.jl","page":"User's guide","title":"SP2000China.jl","text":"","category":"section"},{"location":"","page":"User's guide","title":"User's guide","text":"The Julia package for obtaining information on the list of biological species, SP2000China.\nTo use this package, you need to register on the Species 2000 China website and obtain API services.\nTo install this package, you can use the following command:","category":"page"},{"location":"","page":"User's guide","title":"User's guide","text":"using Pkg\nPkg.add(\"SP2000China\")","category":"page"},{"location":"function/#Function","page":"Function","title":"Function","text":"","category":"section"},{"location":"function/#Website-api-access-function","page":"Function","title":"Website api access function","text":"","category":"section"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetFamiliesByFamilyName","category":"page"},{"location":"function/#SP2000China.GetFamiliesByFamilyName","page":"Function","title":"SP2000China.GetFamiliesByFamilyName","text":"GetFamiliesByFamilyName(;family_name::String,api_key::String,page::Int=1)\n\nDescription\n\nQuery by family name and return a collection of family IDs.\n\nParameters\n\nfamily_name: The family name, or a part of it, supporting both Latin and Chinese names.\napi_key: The API service key for registered users.\npage: The page number, an integer not less than 1. If not provided, it defaults to 1.\n\nResults\n\nresult: A structure of type GetFamiliesByFamilyNameStruct.\nresult.data: Dictionary converted from JSON information.\nresult.count: Total number of matches.\nresult.page: Current data page.\nresult.limit: Number of items displayed per page.\nresult.abstract: Refined data frame.\n\nExample\n\nusing SP2000China;\nyour_family_name = \"Coriariaceae\";\nyour_api_key = \"Please register an account and obtain an API key\";\nyour_page = 1;\nresult = GetFamiliesByFamilyName(family_name=your_family_name,api_key=your_api_key,page=your_page);\nresult.data\nresult.count\nresult.page\nresult.limit\nresult.abstract\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByFamilyId","category":"page"},{"location":"function/#SP2000China.GetSpeciesByFamilyId","page":"Function","title":"SP2000China.GetSpeciesByFamilyId","text":"GetSpeciesByFamilyId(;family_id::String,api_key::String,page::Int=1)\n\nDescription\n\nQuery species by family ID and return a list of species.\n\nParameters\n\nfamily_id:The family ID, a unique value.\napi_key:The API service key for registered users.\npage:The page number, an integer not less than 1. Defaults to 1 if not provided.\n\nResults\n\nresult: A structure of type GetSpeciesByFamilyIdStruct.\nresult.data: Dictionary converted from JSON information.\nresult.count: Total number of matches.\nresult.page: Current data page.\nresult.limit: Number of items displayed per page.\nresult.abstract: Refined data frame.\n\nExample\n\nusing SP2000China;\nyour_family_id = \"F20171000000291\";\nyour_api_key = \"Please register an account and obtain an API key\";\nyour_page = 1;\nresult = GetSpeciesByFamilyId(family_id=your_family_id,api_key=your_api_key,page=your_page);\nresult.data\nresult.count\nresult.page\nresult.limit\nresult.abstract\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByScientificName","category":"page"},{"location":"function/#SP2000China.GetSpeciesByScientificName","page":"Function","title":"SP2000China.GetSpeciesByScientificName","text":"GetSpeciesByScientificName(;scientific_name::String,api_key::String,page::Int=1)\n\nDescription\n\nQuery by scientific name and return species IDs.\n\nParameters\n\nscientific_name:The scientific name, or a part of it, supporting both Latin and Chinese names.\napi_key: The API service key for registered users.\npage: The page number, an integer not less than 1. If not provided, it defaults to 1.\n\nResults\n\nresult: A structure of type GetSpeciesByScientificNameStruct.\nresult.data: Dictionary converted from JSON information.\nresult.count: Total number of matches.\nresult.page: Current data page.\nresult.limit: Number of items displayed per page.\nresult.abstract: Refined data frame.\n\nExample\n\nusing SP2000China;\nyour_scientific_name = \"Actinidia arg\";\nyour_api_key = \"Please register an account and obtain an API key\";\nyour_page = 1;\nresult = GetSpeciesByScientificName(scientific_name=your_scientific_name,api_key=your_api_key,page=your_page);\nresult.data\nresult.count\nresult.page\nresult.limit\nresult.abstract\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByCommonName","category":"page"},{"location":"function/#SP2000China.GetSpeciesByCommonName","page":"Function","title":"SP2000China.GetSpeciesByCommonName","text":"GetSpeciesByCommonName(;common_name::String,api_key::String,page::Int=1)\n\nDescription\n\nQuery by common name and return species or subspecies information.\n\nParameters\n\ncommon_name: The common name, or a part of it.\napi_key: The API service key for registered users.\npage: The page number, an integer not less than 1. If not provided, it defaults to 1.\n\nResults\n\nresult: A structure of type GetSpeciesByCommonNameStruct.\nresult.data: Dictionary converted from JSON information.\nresult.count: Total number of matches.\nresult.page: Current data page.\nresult.limit: Number of items displayed per page.\nresult.abstract: Refined data frame.\n\nExample\n\nusing SP2000China;\nyour_common_name = \"土人参\";\nyour_api_key = \"Please register an account and obtain an API key\";\nyour_page = 1;\nresult = GetSpeciesByCommonName(common_name=your_common_name,api_key=your_api_key,page=your_page);\nresult.data\nresult.count\nresult.page\nresult.limit\nresult.abstract\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByNameCode","category":"page"},{"location":"function/#SP2000China.GetSpeciesByNameCode","page":"Function","title":"SP2000China.GetSpeciesByNameCode","text":"GetSpeciesByNameCode(;name_code::String,api_key::String)\n\nDescription\n\nRetrieve detailed information based on the species ID.\n\nParameters\n\nname_code: The species ID.\napi_key: The API service key for registered users.\n\nResults\n\nresult: A structure of type GetSpeciesByNameCodeStruct.\nresult.data: Dictionary converted from JSON information.\nresult.abstract: Refined data frame.\n\nExample\n\nusing SP2000China;\nyour_name_code = \"1ac19d0d82d84dd2900d51a742fa9296\";\nyour_api_key = \"Please register an account and obtain an API key\";\nresult = GetSpeciesByNameCode(name_code=your_name_code,api_key=your_api_key);\nresult.data\nresult.abstract\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetNameByKeyword","category":"page"},{"location":"function/#SP2000China.GetNameByKeyword","page":"Function","title":"SP2000China.GetNameByKeyword","text":"GetNameByKeyword(;keyword::String,api_key::String,page::Int=1)\n\nDescription\n\nSearch for name information based on a keyword.\n\nParameters\n\nkeyword: The name keyword (at least 2 characters).\napi_key: The API service key for registered users.\npage: The page number, an integer not less than 1. If not provided, it defaults to 1.\n\nResults\n\nresult: A structure of type GetNameByKeywordStruct.\nresult.data: Dictionary converted from JSON information.\nresult.count: Total number of matches.\nresult.page: Current data page.\nresult.limit: Number of items displayed per page.\nresult.abstract: Refined data frame.\n\nExample\n\nusing SP2000China;\nyour_keyword=\"柳莺\";\nyour_api_key = \"Please register an account and obtain an API key\";\nyour_page = 1;\nresult = GetNameByKeyword(keyword=your_keyword,api_key=your_api_key,page=your_page);\nresult.data\nresult.count\nresult.page\nresult.limit\nresult.abstract\n\n\n\n\n\n","category":"function"},{"location":"function/#Network-related-tools","page":"Function","title":"Network related tools","text":"","category":"section"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.Chinese2Latin","category":"page"},{"location":"function/#SP2000China.Chinese2Latin","page":"Function","title":"SP2000China.Chinese2Latin","text":"Chinese2Latin(;chinese_data::DataFrame,col_name::String,api_key::String,page::Int=1)\n\nDescription\n\nBased on the species Chinese name column provided by the data frame, batch query the scientific names.\n\nParameters\n\nchinese_data: The data frame containing the species' Chinese names.\ncol_name: The name of the column in the data frame where the Chinese names are located.\napi_key: The API service key for registered users.\npage: The page number, an integer not less than 1. If not provided, it defaults to 1.\n\nResults\n\nresult: The data frame that summarizes the basic information after batch querying the Chinese names, with unknown displayed for content that could not be queried.\n\nExample\n\nusing SP2000China;\nusing DataFrames;\nchinese_names = [\"黄顶菊\", \"虚构植物\", \"爵床\", \"菖蒲\", \"慈姑\", \"野慈姑\"];\nsampling_point = [\"西藏\", \"四川\", \"江苏\", \"湖北\", \"广东\", \"浙江\"];\nyour_chinese_data = DataFrame(中文名=chinese_names, 采样点=sampling_point);\nprintln(your_chinese_data)\nyour_col_name = \"中文名\";\nyour_api_key = \"Please register an account and obtain an API key\";\nyour_page = 1;\nresult = Chinese2Latin(chinese_data=your_chinese_data,col_name=your_col_name,api_key=your_api_key,page=your_page);\nprintln(result)\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.FindUnknown","category":"page"},{"location":"function/#SP2000China.FindUnknown","page":"Function","title":"SP2000China.FindUnknown","text":"FindUnknown(all_df::DataFrame)\n\nDescription\n\nFilter out species that were not found in the search from the table.\n\nParameters\n\nall_df: The result after processing by the Chinese2Latin function.\n\nResults\n\nresult: Species that could not be matched in the database are filtered out. Considerations may need to be made for common names and other factors.\n\nExample\n\nusing SP2000China;\nusing DataFrames;\nchinese_names = [\"黄顶菊\", \"虚构植物\", \"爵床\", \"菖蒲\", \"慈姑\", \"野慈姑\"];\nsampling_point = [\"西藏\", \"四川\", \"江苏\", \"湖北\", \"广东\", \"浙江\"];\nyour_chinese_data = DataFrame(中文名=chinese_names, 采样点=sampling_point);\nprintln(your_chinese_data)\nyour_col_name = \"中文名\";\nyour_api_key = \"Please register an account and obtain an API key\";\nyour_page = 1;\nall_df = Chinese2Latin(chinese_data=your_chinese_data,col_name=your_col_name,api_key=your_api_key,page=your_page);\nprintln(all_df)\nresult = FindUnknown(all_df);\nprintln(result)\n\n\n\n\n\n","category":"function"},{"location":"function/#Local-related-tools","page":"Function","title":"Local related tools","text":"","category":"section"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.Latin2GenusSpecies","category":"page"},{"location":"function/#SP2000China.Latin2GenusSpecies","page":"Function","title":"SP2000China.Latin2GenusSpecies","text":"Latin2GenusSpecies(latin_text::String)\n\nDescription\n\nConverts a Latin scientific name to an abbreviated form containing only the genus and species names.\n\nParameters\n\nlatin_text: Latin scientific name.\n\nResults\n\ngenus_species: Abbreviated form containing only the genus and species names.\n\nExample\n\nusing SP2000China;\nlatin_text = \"Cotinus coggygria var. pubescens Engl.\";\ngenus_species = Latin2GenusSpecies(latin_text);\nprintln(genus_species)\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.DfSearch","category":"page"},{"location":"function/#SP2000China.DfSearch","page":"Function","title":"SP2000China.DfSearch","text":"DfSearch(;search_data::DataFrame,search_col::String,source_data::DataFrame,source_col::String)\n\nDescription\n\nSearches for species based on a local database.\n\nParameters\n\nsearch_data: The DataFrame that needs to be searched.\nsearch_col: The column name in the search DataFrame to look for.\nsource_data: The DataFrame of local data.\nsource_col: The column name in the local data DataFrame to look for.\n\nResults\n\nresult: The merged search results.\n\nExample\n\nusing SP2000China;\nusing SP2000ChinaData;\nusing DataFrames;\nchinese_names = [\"黄顶菊\", \"虚构植物\", \"爵床\", \"菖蒲\", \"慈姑\", \"野慈姑\"];\nsampling_points = [\"西藏\", \"四川\", \"江苏\", \"湖北\", \"广东\", \"浙江\"];\nyour_search_data = DataFrame(中文名=chinese_names, 采样点=sampling_points);\nyour_source_data = Plantae();\nyour_search_col = \"中文名\";\nyour_source_col = \"物种中文名\";\nresult = DfSearch(search_data=your_search_data,search_col=your_search_col,source_data=your_source_data,source_col=your_source_col);\nprintln(result.matched)\nprintln(result.unmatched)\n\n\n\n\n\n","category":"function"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.StrSearch","category":"page"},{"location":"function/#SP2000China.StrSearch","page":"Function","title":"SP2000China.StrSearch","text":"StrSearch(;search_str::String,source_data::DataFrame,source_col::String)\n\nDescription\n\nSearches for species based on a local database.\n\nParameters\n\nsearch_str: The string that needs to be searched.\nsource_data: The DataFrame of local data.\nsource_col: The column name in the local data DataFrame to look for.\n\nResults\n\nresult: The merged search results.\n\nExample\n\nusing SP2000China;\nusing SP2000ChinaData;\nyour_search_str = \"慈姑\";\nyour_source_data = Plantae();\nyour_source_col = \"物种中文名\";\nresult = StrSearch(search_str=your_search_str,source_data=your_source_data,source_col=your_source_col);\nprintln(result)\n\n\n\n\n\n","category":"function"},{"location":"function/#Other","page":"Function","title":"Other","text":"","category":"section"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.SP2000China","category":"page"},{"location":"function/#SP2000China.SP2000China","page":"Function","title":"SP2000China.SP2000China","text":"The Julia package for obtaining information on the list of biological species, SP2000China.\n\n\n\n\n\n","category":"module"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetFamiliesByFamilyNameStruct","category":"page"},{"location":"function/#SP2000China.GetFamiliesByFamilyNameStruct","page":"Function","title":"SP2000China.GetFamiliesByFamilyNameStruct","text":"Construct a structure to store the results of the function GetFamiliesByFamilyName.\n\n\n\n\n\n","category":"type"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByFamilyIdStruct","category":"page"},{"location":"function/#SP2000China.GetSpeciesByFamilyIdStruct","page":"Function","title":"SP2000China.GetSpeciesByFamilyIdStruct","text":"Construct a structure to store the results of the function GetSpeciesByFamilyId.\n\n\n\n\n\n","category":"type"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByScientificNameStruct","category":"page"},{"location":"function/#SP2000China.GetSpeciesByScientificNameStruct","page":"Function","title":"SP2000China.GetSpeciesByScientificNameStruct","text":"Construct a structure to store the results of the function GetSpeciesByScientificName.\n\n\n\n\n\n","category":"type"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByCommonNameStruct","category":"page"},{"location":"function/#SP2000China.GetSpeciesByCommonNameStruct","page":"Function","title":"SP2000China.GetSpeciesByCommonNameStruct","text":"Construct a structure to store the results of the function GetSpeciesByCommonName.\n\n\n\n\n\n","category":"type"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetSpeciesByNameCodeStruct","category":"page"},{"location":"function/#SP2000China.GetSpeciesByNameCodeStruct","page":"Function","title":"SP2000China.GetSpeciesByNameCodeStruct","text":"Construct a structure to store the results of the function GetSpeciesByNameCode.\n\n\n\n\n\n","category":"type"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.GetNameByKeywordStruct","category":"page"},{"location":"function/#SP2000China.GetNameByKeywordStruct","page":"Function","title":"SP2000China.GetNameByKeywordStruct","text":"Construct a structure to store the results of the function GetNameByKeyword.\n\n\n\n\n\n","category":"type"},{"location":"function/","page":"Function","title":"Function","text":"SP2000China.DfSearchStruct","category":"page"},{"location":"function/#SP2000China.DfSearchStruct","page":"Function","title":"SP2000China.DfSearchStruct","text":"Construct a structure to store the results of the function DfSearch.\n\n\n\n\n\n","category":"type"},{"location":"acknowledgement/#Acknowledgement","page":"Acknowledgement","title":"Acknowledgement","text":"","category":"section"},{"location":"acknowledgement/","page":"Acknowledgement","title":"Acknowledgement","text":"Thank you, Jinbao the little cat, for not stepping on my keyboard.","category":"page"}]
}
